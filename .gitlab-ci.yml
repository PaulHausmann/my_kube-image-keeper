include:
  - template: 'Workflows/Branch-Pipelines.gitlab-ci.yml'

stages:
  - test
  - build
  - release

run tests:
  stage: test
  image: golang:1.16-alpine3.14
  variables:
    CGO_ENABLED: '0'
    GOOS: linux
    GOARCH: amd64
  script:
    - go test -v ./internal/...

helm template test:
  stage: test
  image: dtzar/helm-kubectl:$HELM_VERSION
  rules:
    - if: $CI_COMMIT_BRANCH
      changes:
        - helm/cache-registry
  before_script:
    - helm version
  script:
    - helm template helm/cache-registry

build dirty docker image:
  stage: build
  image: docker:stable
  services:
    - docker:dind
  before_script:
    - apk add --update make git
    - docker login -u "$DOCKER_HUB_USER" -p "$DOCKER_HUB_PASSWORD"
  script:
    - docker build . -t enix/docker-cache-registry:dirty
    - docker push enix/docker-cache-registry:dirty
  rules:
    - if: $CI_COMMIT_TAG == null && $CI_COMMIT_MESSAGE !~ /^chore\(release\):/
  tags:
    - docker-dind

build and push:
  stage: release
  image: docker:stable
  services:
    - docker:dind
  before_script:
    - apk add --update make
    - docker login -u "$DOCKER_HUB_USER" -p "$DOCKER_HUB_PASSWORD"
  script:
    - docker build . -t enix/docker-cache-registry:$CI_COMMIT_TAG
    - docker tag "enix/docker-cache-registry:$CI_COMMIT_TAG" enix/docker-cache-registry
    - docker push enix/docker-cache-registry:$CI_COMMIT_TAG
    - docker push enix/docker-cache-registry
  only:
    - tags
  tags:
    - docker-dind

semantic-release:
  stage: release
  image: enix/semantic-release:gitlab
  script:
    - npx semantic-release --ci
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $CI_COMMIT_TAG == null && $CI_COMMIT_MESSAGE !~ /^chore\(release\):/
      when: manual

publish-helm:
  stage: release
  image: dtzar/helm-kubectl:${HELM_VERSION}
  variables:
    HELM_CHARTS_PATH: helm/
    CHART: cache-registry
  before_script:
    - helm repo add --username=${HELM_USERNAME} --password=${HELM_PASSWORD} ${HELM_CHART_REPO_NAME} ${HELM_CHART_REPO_URL}/${HELM_CHART_REPO_PROJECT}
    - helm plugin install https://github.com/chartmuseum/helm-push
    - mkdir dist
  script:
    - helm package ${HELM_CHARTS_PATH}/${CHART} --destination=dist/
    - helm cm-push dist/* ${HELM_CHART_REPO_NAME}
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
      changes:
        - ${HELM_CHARTS_PATH}/${CHART}/Chart.yaml
